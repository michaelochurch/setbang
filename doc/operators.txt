0 : ...         -> ... {}
\ : ... X       -> ... (X - {e}) e
/ : ... X y     -> ... (X u {y})
+ : ... X Y     -> ... {X, Y}
_ : ... X       -> ...
~ : ... X       -> ... X X
' : ... X       -> ... (X u {X})
# : ... X       -> ... #X
^ : ... X       -> ... P(X)
= : ... X Y     -> ... (1 if X == Y, 0 if X /= Y)
? : ... X Y     -> ... (1 if Y in X, 0 if else)
> : ... X Y Z 3 -> ... Y Z X
< : ... X Y Z 3 -> ... Z X Y

& : ... X Y     -> ... X i Y
| : ... X Y     -> ... X u Y
- : ... X Y     -> ... X - Y
. : ... X Y     -> ... X (xor) Y

$ : ...         -> ... {0, 1, 2, ...}

` : ... X n     -> ... (X - Y) Y@{n choices from X}
! : ... c       -> ... (printing c)
@ : ...         -> ... (char from stdin)

% : ... X Y     -> ... {{X}, {X, Y}}
* : ... (X, Y)  -> ... X Y

" : ... X       -> ... {X}
; : ... X Y     -> ... Y

{...}       -- set comprehension
(... , ...) -- conditional execution
[...]       -- looping
:           -- macro definition
 1          -- white space = macro invocation. (1 0 2 vs. 102)

standard macros:
1:0'
2:1'
swap:0''>

File format:

:directive1 blah

:directive2 blah

macro1:!@#$!@#$

macro2:!@#%)!(@#

!@#%(!@#)!@#!@$#)@#$@#$_!@#)@#!$_
!@#!@#!@#!%!@$!#%!@#%

blank lines separate macros and separate macros from executables.
